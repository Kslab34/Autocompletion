package autocomplete;

import java.util.Arrays;

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

/**
 * Assignment A03: Autocomplete Me
 * CSIS-2420
 * @author Andrew.rose
 * @author Kelby Schulz
 *
 */
public class Autocomplete {
	private Term[] terms;
	
	/**
	 * Initialize the data structure from the given array of terms
	 * @param terms
	 */
	public Autocomplete(Term[] terms){
		if (terms == null) throw new java.lang.NullPointerException();
		this.terms = terms;
		Arrays.sort(terms);
	}
	
	/**
	 * Return all terms that start with the given prefix, in descending order of weight
	 * @param prefix
	 * @return
	 */
	public Term[] allMatches(String prefix){
		if (prefix == null) throw new java.lang.NullPointerException();
		Term key = new Term(prefix, 0);

    	int first = BinarySearchDeluxe.firstIndexOf(terms, key, Term.byPrefixOrder(prefix.length()));
    	int last = BinarySearchDeluxe.lastIndexOf(terms, key, Term.byPrefixOrder(prefix.length()));
    	if (first == -1 || last == -1) {
    		Term[] noMatches = new Term[0];
    		return noMatches;
    	} else {
    		Term[] matches = new Term[last - first + 1];
    		matches = Arrays.copyOfRange(terms, first, last + 1);
    		Arrays.sort(matches, Term.byReverseWeightOrder());
    		return matches;
    	}
    }
	
	/**
	 * Return the number of terms that start with the given prefix
	 * @param prefix
	 * @return
	 */
	public int numberOfMatches(String prefix){
		if (prefix == null) throw new java.lang.NullPointerException();
		Term temp = new Term(prefix, 0);
    	int i = BinarySearchDeluxe.firstIndexOf(terms, temp, Term.byPrefixOrder(prefix.length()));
    	int j = BinarySearchDeluxe.lastIndexOf(terms, temp, Term.byPrefixOrder(prefix.length()));
		return j - i + 1;
	}
	
	/**
	 * Main line used for testing
	 * @param args
	 */
	public static void main(String[] args) {
		
	    // read in the terms from a file
	    String filename = "src/autocomplete/wiktionary.txt";
	    In in = new In(filename);
	    int N = in.readInt();
	    Term[] termsTest = new Term[N];
	    for (int i = 0; i < N; i++) {
	        double weight = in.readDouble();       // read the next weight
	        in.readChar();                         // scan past the tab
	        String query = in.readLine();          // read the next query
	        termsTest[i] = new Term(query, weight);    // construct the term
	    }

	    // read in queries from standard input and print out the top k matching terms
	    int k = 10;
	    Autocomplete autocomplete = new Autocomplete(termsTest);
	    while (StdIn.hasNextLine()) {
	        String prefix = StdIn.readLine();
	        Term[] results = autocomplete.allMatches(prefix);
	        for (int i = 0; i < Math.min(k, results.length); i++)
	            StdOut.println(results[i]);
	    }
	}
	
}
