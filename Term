package autocomplete;

import java.util.Comparator;
/**
 * Assignment A03: Autocomplete Me
 * CSIS-2420
 * @author Andrew.rose
 *                          
 *
 */
public class Term implements Comparable<Term> {
	public String query;
	public double weight;
	/**
	 * Initialize a term with the given query string and weight
	 * @param query
	 * @param weight
	 */
	public Term(String query, double weight){
		if (query == null) throw new java.lang.NullPointerException();
		if (weight < 0) throw new java.lang.IllegalArgumentException();
		this.query = query;
		this.weight = weight;
	}
	
	/**
	 * Compare the terms in descending order by weight
	 * @return
	 */
	public static Comparator<Term> byReverseWeightOrder(){
		return new Comparator<Term>(){
            public int compare(Term t1, Term t2) {
                if (t1.weight > t2.weight) {
                    return -1;
                } else if (t1.weight < t2.weight) {
                    return 1;
                } else {
                    return 0;
                }
            } 
        };
	}

	/**
	 * Compare the terms in lexicographic order by using only the first r characters of each query
	 * @param r
	 * @return
	 */
	public static Comparator<Term> byPrefixOrder(int r){
		if (r < 0) throw new java.lang.IllegalArgumentException();
		final int stringLength = r;
        return new Comparator<Term>(){
            public int compare(Term t1, Term t2) {
                String s1 = t1.query;
                String s2 = t2.query;
                int minLength = s1.length() < s2.length() ? s1.length() : s2.length();
                if (minLength >= stringLength) {
                    return s1.substring(0, stringLength).compareTo(s2.substring(0, stringLength));
                } else if (s1.substring(0, minLength).compareTo(s2.substring(0, minLength)) == 0) {
                    if (s1.length() == minLength) return -1;
                    else return 1;
                } else return s1.substring(0, minLength).compareTo(s2.substring(0, minLength));
            } 
        };
	}
	
	/**
	 * Compare the terms in lexicographic order by query 
	 */
	public int compareTo(Term that){
		String s1 = this.query;
		String s2 = that.query;
		return s1.compareTo(s2);
	}
	
	/**
	 * Return a string representation of the term in the following format:
	 * the weight, followed by a tab, followed by the query
	 */
	@Override
	public String toString(){
		return Double.toString(this.weight) + "\t" + this.query;
	}

}
